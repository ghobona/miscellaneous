openapi: 3.0.2
info:
  version: 0.0.8
  title: "Environmental Data Retrieval API"
  termsOfService: 'http://www.opengeospatial.org/legal/'
  contact:
    name: "Open Geospatial Consortium (OGC)"
    email: standards-team@ogc.org
    url: 'https://www.ogc.org/contacts'
  license:
    name: OGC software license 1.0
    url: 'http://www.ogc.org/ogc/software/1.0'
  x-logo:
    url: 'https://www.ogc.org/pub/www/files/OGC_Logo_2D_Blue_x_0_0.png'
  description: >
    This document is not an OGC Standard. This document is distributed for review and comment. This document is subject to change without notice and may not be referred to as an OGC Standard.
    
    Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.

    # Introduction

    An Environmental Data Retrevial (EDR) API provides a family of lightweight interfaces to access Environmental Data resources. Each resource addressed by an EDR API 
    maps to a defined query pattern. EDR API query patterns can be thought of as discrete sampling geometries, conceptually in-line with the feature of interest in 
    the Sensor Observation Service (SOS). EDR query patterns range from location-centric real or virtual observation use cases to sub-setting 4-dimensional data cubes 
    along user-supplied sampling geometries. These query-pattern building blocks provide useful building blocks to enable composition of APIs that satisfy a wide range 
    of environmental data use cases.

tags:
  - name: Capabilities
    description: Essential characteristics of the information available from the API.
  - name: Collection metadata
    description: Description of the information available from the collections
  - name: Instance metadata
    description: Description of the information available from instances of a collection
  - name: Collection data queries
    description: Data queries available.
  - name: Instance data queries
    description: Data queries available on instances of the collection.

paths:
  /:
    get:
      tags:
        - Capabilities
      summary: landing page of this API
      description: 'The landing page provides links to the API definition, the Conformance statements and the metadata about the feature data in this dataset.'
      operationId: getLandingPage
      responses:
        '200':
          description: links to the API capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/root'
            text/html:
              schema:
                type: string
      parameters:
        - $ref: '#/components/parameters/outputFormat'
  /conformance:
    get:
      tags:
        - Capabilities
      summary: information about standards that this API conforms to
      description: list all requirements classes specified in a standard that the server conforms to
      operationId: getRequirementsClasses
      responses:
        '200':
          description: the URIs of all requirements classes supported by the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/req-classes'
            text/html:
              schema:
                type: string
      parameters:
        - $ref: '#/components/parameters/outputFormat'
  /groups:
    get:
      tags:
        - Capabilities
      summary: Provide a list of avialable data groups
      operationId: listGroups
      responses:
        '200':
          description: List the available data groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
      parameters:
        - $ref: '#/components/parameters/outputFormat'
  '/groups/{groupId}':
    get:
      tags:
        - Capabilities
      summary: List of links to information available in the group
      operationId: groupInfomation
      responses:
        '200':
          description: List the available data for a group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    parameters:
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/time'
      - $ref: '#/components/parameters/outputFormat'
  /collections:
    get:
      tags:
        - Capabilities
      summary: List the avialable collections from the service
      operationId: listCollections
      responses:
        '200':
          description: Metdata about the Environmental data collections shared by this API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/content'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    parameters:
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/time'
      - $ref: '#/components/parameters/outputFormat'
  '/collections/{collectionId}':
    get:
      tags:
        - Collection metadata 
      summary: List query types supported by the collection
      description: This will provide information about the query types that are supported by the chosen collection Use content negotiation to request HTML or JSON.
      operationId: getQueries
      responses:
        '200':
          description: 'Metadata about the {collectionId} collection shared by this API.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionDetail'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/outputFormat'
  '/collections/{collectionId}/position':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for position queries  of collection {collectionId}'
      description: Query end point for position queries
      operationId: getDataForPoint
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/pointCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/parametername'        
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/radius':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for radius queries  of collection {collectionId}'
      description: Query end point for to return values within a defined radius of a point queries
      operationId: getDataForRadius
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/radiusCoords'
        - $ref: '#/components/parameters/within'
        - $ref: '#/components/parameters/withinUnits'        
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'            
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/area':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for area queries  of collection {collectionId} defined by a polygon'
      description: Return the data values for the data area defined by the query parameters
      operationId: GetDataForArea
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/areaCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/resolutionX'
        - $ref: '#/components/parameters/resolutionY'
        - $ref: '#/components/parameters/outputFormat'        
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/cube':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for Cube queries  of collection {collectionId} defined by a cube'
      description: Return the data values for the data Cube defined by the query parameters
      operationId: GetDataForCube
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/cubeCoords'
        - $ref: '#/components/parameters/minZ'
        - $ref: '#/components/parameters/maxZ'
        - $ref: '#/components/parameters/time'        
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/resolutionX'            
        - $ref: '#/components/parameters/resolutionY'            
        - $ref: '#/components/parameters/resolutionZ'            
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'            
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/trajectory':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for trajectory queries  of collection {collectionId} defined by a wkt linestring and a iso8601 time period'
      description: Return the data values for the data Polygon defined by the query parameters
      operationId: GetDataForTrajectory
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/trajectoryCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'      
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'            
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/corridor':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for Corridor queries  of collection {collectionId} defined by a polygon'
      description: Return the data values for the Corridor defined by the query parameters
      operationId: GetDataForCorridor
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/corridorCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/parametername'         
        - $ref: '#/components/parameters/corridorWidth'
        - $ref: '#/components/parameters/corridorHeight'
        - $ref: '#/components/parameters/resolutionX'
        - $ref: '#/components/parameters/resolutionZ'
        - $ref: '#/components/parameters/crs'            
        - $ref: '#/components/parameters/outputFormat'            
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/items':
    get:
      tags:
        - Collection metadata
      summary: List available items
      description: List the items available in the collection accessible via a unique identifier
      operationId: ListDataItems
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/time'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/EDRfeatureCollectionGeoJSON'
              example:
                type: FeatureCollection
                links:
                  - href: 'http://data.example.com/collections/buildings/items.json'
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: 'http://data.example.com/collections/buildings/items.html'
                    rel: alternate
                    type: text/html
                    title: this document as HTML
                  - href: 'http://data.example.com/collections/buildings/items.json&offset=10&limit=2'
                    rel: next
                    type: application/geo+json
                    title: next page
                timeStamp: '2018-04-03T14:52:23Z'
                numberMatched: 123
                numberReturned: 2
                features:
                  - type: Feature
                    id: '123'
                    geometry:
                      type: Polygon
                      coordinates:
                        - ...
                    properties:
                      function: residential
                      floors: '2'
                      lastUpdate: '2015-08-01T12:34:56Z'
                  - type: Feature
                    id: '132'
                    geometry:
                      type: Polygon
                      coordinates:
                        - ...
                    properties:
                      function: public use
                      floors: '10'
                      lastUpdate: '2013-12-03T10:15:37Z'          
            application/json: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/items/{itemID}':
    get:
      tags:
        - Collection data queries
      summary: Return item {itemId} from collection {collectionId} 
      description: 'Query end point to retrieve data from collection {collectionId} using a unique identifier'
      operationId: GetDataForItem
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - name: itemID
          in: path
          required: true
          description: 'Retrieve data from the collection using a unique identifier.'
          schema:
            type: string
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/featureGeoJSON'
              example:
                type: Feature
                links:
                  - href: 'http://data.example.com/id/building/123'
                    rel: canonical
                    title: canonical URI of the building
                  - href: 'http://data.example.com/collections/buildings/items/123.json'
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: 'http://data.example.com/collections/buildings/items/123.html'
                    rel: alternate
                    type: text/html
                    title: this document as HTML
                  - href: 'http://data.example.com/collections/buildings'
                    rel: collection
                    type: application/geo+json
                    title: the collection document
                id: '123'
                geometry:
                  type: Polygon
                  coordinates:
                    - ...
                properties:
                  function: residential
                  floors: '2'
                  lastUpdate: '2015-08-01T12:34:56Z'          
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances':
    get:
      tags:
        - Collection metadata
      summary: 'List data instances of {collectionId}'
      description: This will provide list of the avalable instances of the collection Use content negotiation to request HTML or JSON.
      operationId: getCollectionInstances
      responses:
        '200':
          description: 'Metadata about the instance of {collectionId} collection shared by this API.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceDetail'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/outputFormat'
  '/collections/{collectionId}/instances/{instanceId}/position':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point for position queries of instance {instanceId} of collection {collectionId}'
      description: Query end point for position queries
      operationId: getInstanceDataForPoint
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/pointCoords'        
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/crs'        
        - $ref: '#/components/parameters/outputFormat'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/radius':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point to return data within defined radius of a point for an instance {instanceId} of collection {collectionId}'
      description: Query end point to return all data within a defined radius of the defined point location queries
      operationId: getInstanceDataForRadius
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/radiusCoords'
        - $ref: '#/components/parameters/z'        
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/within'
        - $ref: '#/components/parameters/withinUnits'
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'        
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/area':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point for area queries of instance {instanceId} of collection {collectionId} defined by a polygon'
      description: Return the data values for the data area defined by the query parameters
      operationId: GetInstanceDataForArea
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/areaCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/resolutionX'
        - $ref: '#/components/parameters/resolutionY'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to 
           process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/cube':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point for Cube queries of instance {instanceId} of collection {collectionId} defined by a cube'
      description: Return the data values for the data Cube defined by the query parameters
      operationId: GetInstanceDataForCube
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/cubeCoords'
        - $ref: '#/components/parameters/minZ'
        - $ref: '#/components/parameters/maxZ'
        - $ref: '#/components/parameters/time'        
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/resolutionX'            
        - $ref: '#/components/parameters/resolutionY'            
        - $ref: '#/components/parameters/resolutionZ'            
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/trajectory':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point for trajectory queries of instance {instanceId} of collection {collectionId} defined by a wkt linestring and a iso8601 time period'
      description: Return the data values for the data Polygon defined by the query parameters
      operationId: GetInstanceDataForTrajectory
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/trajectoryCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'        
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/outputFormat'        
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/corridor':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point for Corridor queries of instance {instanceId} of collection {collectionId} defined by a polygon'
      description: Return the data values for the Corridor defined by the query parameters
      operationId: GetInstanceDataForCorridor
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/corridorCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/time'        
        - $ref: '#/components/parameters/parametername'
        - $ref: '#/components/parameters/corridorWidth'
        - $ref: '#/components/parameters/corridorHeight'
        - $ref: '#/components/parameters/resolutionX'
        - $ref: '#/components/parameters/resolutionZ'
        - $ref: '#/components/parameters/crs'        
        - $ref: '#/components/parameters/outputFormat'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/locations/{locID}':
    get:
      tags:
        - Instance data queries
      summary: 'Query end point for queries of instance {instanceId} of collection {collectionId} defined by a location id'
      description: Return data the for the location defined by locid
      operationId: GetInstanceDataForLocation
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/locID'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/crs'          
        - $ref: '#/components/parameters/outputFormat'            
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/locations/{locID}':
    get:
      tags:
        - Collection data queries
      summary: 'Query end point for queries of collection {collectionId} defined by a location id'
      description: Return data the for the location defined by locid
      operationId: GetCollectionDataForLocation
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/locID'
        - $ref: '#/components/parameters/time'
        - $ref: '#/components/parameters/crs'          
        - $ref: '#/components/parameters/outputFormat'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/instances/{instanceId}/locations':
    get:
      tags:
        - Instance metadata
      summary: List available location identifers for the instance
      description: List the locations available for the instance of the collection
      operationId: ListDataInstanceLocations
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/time'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen instance of the data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  '/collections/{collectionId}/locations':
    get:
      tags:
        - Collection metadata
      summary: List available location identifers for the collection
      description: List the locations available for the collection
      operationId: ListCollectionDataLocations
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/time'
      responses:
        '200':
          description: Data ranges required to construct valid queries for the choosen instance of the data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageJSON'
            application/x-netcdf: {}
            text/xml: {}
        '202':
          description: Data request still being processed
        '308':
          description: Request will take a significant time to process
        '404':
          description: Requested data not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        '413':
          description: Requested data volume to large to be handled by this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            application/x-netcdf: {}
            text/xml: {}
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
components:
  schemas:
    exception:
      required:
        - code
      type: object
      properties:
        code:
          type: string
        description:
          type: string
    root:
      required:
        - links
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/'
              rel: self
              type: application/json
              title: this document
            - href: 'http://data.example.org/api'
              rel: service
              type: application/openapi+json;version=3.0
              title: the API definition
            - href: 'http://data.example.org/conformance'
              rel: conformance
              type: application/json
              title: WFS 3.0 conformance classes implemented by this server
            - href: 'http://data.example.org/groups'
              rel: data
              type: application/json
              title: List of available groups
            - href: 'http://data.example.org/collections'
              rel: data
              type: application/json
              title: List the available collections
    req-classes:
      required:
        - conformsTo
      type: object
      properties:
        conformsTo:
          type: array
          items:
            type: string
          example:
            - 'http://www.opengis.net/spec/wfs-1/3.0/req/core'
            - 'http://www.opengis.net/spec/wfs-1/3.0/req/oas30'
            - 'http://www.opengis.net/spec/wfs-1/3.0/req/html'
            - 'http://www.opengis.net/spec/wfs-1/3.0/req/geojson'
    link:
      required:
        - href
      type: object
      properties:
        href:
          type: string
        rel:
          type: string
          example: prev
        type:
          type: string
          example: application/geo+json
        hreflang:
          type: string
          example: en
    groups:
      required:
        - links
        - members
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/collections.json'
              rel: self
              type: application/json
              title: this document
            - href: 'http://data.example.org/collections.html'
              rel: alternate
              type: text/html
              title: this document as HTML
            - href: 'http://schemas.example.org/1.0/foobar.xsd'
              rel: describedBy
              type: application/xml
              title: XML schema for Acme Corporation data
        members:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/link'
    content:
      required:
        - links
        - collections
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/collections.json'
              rel: self
              type: application/json
              title: this document
            - href: 'http://data.example.org/collections.html'
              rel: alternate
              type: text/html
              title: this document as HTML
            - href: 'http://schemas.example.org/1.0/foobar.xsd'
              rel: describedBy
              type: application/xml
              title: XML schema for Acme Corporation data
        collections:
          type: array
          items:
            $ref: '#/components/schemas/collectionInfo'
    collectionInfo:
      required:
        - id
        - links
      type: object
      properties:
        id:
          description: identifier for the collection
          type: string
          example: GFSSurf
        title:
          description: human readable title for the collection
          type: string
          example: GFS Surface Data
        description:
          description: a description of the collection instance
          type: string
          example: NOAA Global Forecast surface values
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/collections/observations'
              rel: item
              type: application/geo+json
              title: Observation data
            - href: 'http://example.org/concepts/building.html'
              rel: describedBy
              type: text/html
              title: List of available observation types
        extent:
          $ref: 'https://raw.githubusercontent.com/opengeospatial/ogcapi-features/master/core/openapi/schemas/extent.yaml'
        crs:
          description: 'The coordinate reference systems in which geometries may be retrieved. Coordinate reference systems are identified by a URI. The first coordinate reference system is the coordinate reference system that is used by default. This is always "http://www.opengis.net/def/crs/OGC/1.3/CRS84", i.e. WGS84 longitude/latitude.'
          default:
            - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
          type: array
          items:
            $ref: '#/components/schemas/crsObject'
    collectionDetail:
      required:
        - links
        - instances
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/collections/observations'
              rel: item
              type: application/geo+json
              title: Observation data
            - href: 'http://example.org/concepts/building.html'
              rel: describedBy
              type: text/html
              title: List of available observation types
        instances:
          type: array
          items:
            $ref: '#/components/schemas/instanceInfo'
        name:
          description: name of the collection
          type: string
          example: Metar data
        title:
          description: title of the collection
          type: string
          example: Metar observations
        parameters:
          description: list of the data parameters available in the collection
          type: array
          items:
            type: string
    instanceInfo:
      required:
        - id
        - links
      type: object
      properties:
        id:
          description: identifier for the instance of the collection
          type: string
          example: '2019-08-01T00:00:00Z'
        title:
          description: human readable title for the collection instance
          type: string
          example: '2019-08-01T00:00:00Z model run'
        description:
          description: a description of the collection instance
          type: string
          example: 'NOAA Global Forecast surface values from the 2019-08-01T00:00:00Z model run'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/collections/observations'
              rel: item
              type: application/geo+json
              title: Observation data
            - href: 'http://example.org/concepts/building.html'
              rel: describedBy
              type: text/html
              title: List of available observation types
        extent:
          $ref: 'https://raw.githubusercontent.com/opengeospatial/ogcapi-features/master/core/openapi/schemas/extent.yaml'
    instanceDetail:
      required:
        - links
        - collection
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: 'http://data.example.org/collections/observations'
              rel: item
              type: application/geo+json
              title: Observation data
            - href: 'http://example.org/concepts/building.html'
              rel: describedBy
              type: text/html
              title: List of available observation types
        id:
          description: identifier for the instance of the collection
          type: string
          example: '2019-08-01T00:00:00Z'
        title:
          description: human readable title for the collection instance
          type: string
          example: '2019-08-01T00:00:00Z model run'
        description:
          description: a description of the collection instance
          type: string
          example: 'NOAA Global Forecast surface values from the 2019-08-01T00:00:00Z model run'
        extent:
          $ref: '#/components/schemas/instanceAxes'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        outputCRS:
          type: array
          items:
            $ref: '#/components/schemas/crsObject'
        outputFormat:
          description: output format options for the query
          type: array
          items:
            type: string
    parameterExtent:
      description: Definition of the geo-temporal extent of a parameter
      required:
        - dimensions
        - wkt
        - horizontal
      type: object
      properties:
        dimensions:
          $ref: '#/components/schemas/dimension'
        wkt:
          description: |-
            Well Known Text description of the collections coordinate reference system
            see http://docs.opengeospatial.org/is/12-063r5/12-063r5.html
          type: string
        horizontal:
          $ref: '#/components/schemas/horizontal'
        vertical:
          $ref: '#/components/schemas/vertical'
        temporal:
          $ref: '#/components/schemas/temporal'
      example:
        dimensions:
          x: 92
          'y': 33
          z: 8
          time: 98
        wkt: 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"],TIMEEXTENT[2019-05-28T06:00:00Z,2019-05-30T06:00:00Z],VERTICALEXTENT[2.0,2.0,LENGTHUNIT["metre",1.0]]]'
        horizontal:
          name:
            - longitude
            - latitude
          coordinates:
            - x
            - 'y'
          geographic: 'BBOX[359.875,90.125,-0.125,-90.125]'
        vertical:
          name:
            - height_above_ground
          coordinates:
            - z
          range:
            - 36.47
            - 99.07
        temporal:
          name: time
          coordinates:
            - time
          range:
            - '2019-05-28T06:00:00Z'
            - '2019-05-28T18:00:00Z'
            - '2019-05-29T06:00:00Z'
            - '2019-05-29T18:00:00Z'
            - '2019-05-30T06:00:00Z'
    measurementType:
      type: object
      title: Parameter measurement type
      description: Approach to calaculating the data values
      required:
        - method
      properties:
        method:
          type: string
          example: mean
        duration:
          type: string
          title: Measurement time duartion
          description: The time duration that the value was calculated for as an RFC3339 duration value.  If the method value is instantaneous this value is not required.
          example: PT10M
    dimension:
      title: Root Type for dimension
      description: definition of the resolution of the collection
      required:
        - x
        - 'y'
      type: object
      properties:
        x:
          format: int32
          description: x coordinate resolution
          type: integer
        'y':
          format: int32
          description: y coordinate resolution
          type: integer
        z:
          format: int32
          description: vertical level resolution
          type: integer
        time:
          format: int32
          description: Time step resolution
          type: integer
      example:
        x: 720
        'y': 360
        z: 1
        time: 5
    horizontal:
      title: Root Type for horizontal
      description: Definition of the spatial aspects of the collection
      required:
        - coordinates
        - geographic
      type: object
      properties:
        name:
          description: A list of the names of the coordinates MUST be in the same order as the values in the coordinates array
          type: array
          items: {}
        coordinates:
          description: A list of the coordinates
          type: array
          items:
            type: string
        geographic:
          description: Definition of the area covered by the collection as a Well Know Text Bounding Box
          type: string
      example:
        name:
          - longitude
          - latitude
        coordinates:
          - x
          - 'y'
        geographic: 'BBOX[359.875,90.125,-0.125,-90.125]'
    vertical:
      title: Root Type for vertical
      description: 'Description of the vertical dimensions of the collection '
      required:
        - name
        - coordinates
        - range
      type: object
      properties:
        name:
          description: Name of the coordinates
          type: array
          items:
            type: string
        coordinates:
          description: coordinate
          type: array
          items:
            type: string
        range:
          type: array
          items:
            type: number
      example:
        name:
          - height_above_ground
        coordinates:
          - z
        range:
          - 2
    temporal:
      title: Root Type for temporal
      description: Description of the time dimensions of the collection
      required:
        - coordinates
        - name
        - range
      type: object
      properties:
        name:
          description: Array of coordinate names MUST be in the same order as the coordinates array
          type: string
        coordinates:
          description: Coordinate axes names
          type: array
          items:
            type: string
        range:
          description: List of the available time dimension values in the collection
          type: array
          items:
            type: string
      example:
        name: time
        coordinates:
          - time
        range:
          - '2019-05-28T06:00:00Z'
          - '2019-05-28T18:00:00Z'
          - '2019-05-29T06:00:00Z'
          - '2019-05-29T18:00:00Z'
          - '2019-05-30T06:00:00Z'
    Parameter:
      title: Parameter name
      description: Definition of data parameter
      required:
        - type
        - unit
        - description
        - observedProperty
        - id
      type: object
      properties:
        type:
          description: type
          enum:
            - Parameter
        description:
          $ref: '#/components/schemas/descriptionInfo'
        unit:
          $ref: '#/components/schemas/units'
        observedProperty:
          $ref: '#/components/schemas/ObservedProperty'
        extent:
          $ref: '#/components/schemas/parameterExtent'
        id:
          description: 'Unique ID of the parameter, this is the value used for querying the data'
          type: string
        measurementType:
          $ref: '#/components/schemas/measurementType'
      example:
        type: Parameter
        id: sea_ice
        description:
          en: Sea Ice concentration (ice=1;no ice=0)
        unit:
          label:
            en: Ratio
          symbol:
            value: '1'
            type: 'http://www.opengis.net/def/uom/UCUM/'
        observedProperty:
          id: 'http://vocab.nerc.ac.uk/standard_name/sea_ice_area_fraction/'
          label:
            en: Sea Ice Concentration
    units:
      title: Root Type for units
      description: definition of data units
      required:
        - symbol
        - label
      type: object
      properties:
        label:
          type: string
          properties:
            en:
              type: string
        symbol:
          $ref: '#/components/schemas/symbol'
      example:
        label:
          en: <unit Label>
        symbol:
          value: <unit symbol>
          type: <href to unit metadata description>
    symbol:
      title: Root Type for symbol
      description: Information about the symbol used to describe the units
      required:
        - value
        - type
      type: object
      properties:
        value:
          $ref: '#/components/schemas/link'
      example:
        value: hPa
        type: 'http://www.opengis.net/def/uom/UCUM/'
    descriptionInfo:
      required:
        - summary
        - created
        - axes
      type: object
      properties:
        summary:
          description: brief description of the collection
          type: string
        created:
          format: dateTime
          description: time that the coverage collection was created/modified
          type: string
        axes:
          $ref: '#/components/schemas/axesInfo'
    axesInfo:
      required:
        - x
        - 'y'
        - t
      type: object
      properties:
        x:
          $ref: '#/components/schemas/axesDefInfo'
        'y':
          $ref: '#/components/schemas/axesDefInfo'
        z:
          $ref: '#/components/schemas/axesListDefInfo'
        t:
          $ref: '#/components/schemas/axesDefInfo'
      example:
        x:
          units: some text
          lowerBound: some text
          upperBound: some text
        'y':
          units: some text
          lowerBound: some text
          upperBound: some text
        z:
          units: some text
          values:
            - some text
            - some text
        t:
          units: some text
          lowerBound: some text
          upperBound: some text
    axesDefInfo:
      description: Definition of the axis coordinate range
      required:
        - units
        - lowerBound
        - upperBound
      type: object
      properties:
        units:
          $ref: '#/components/schemas/units'
        lowerBound:
          description: minimum value of the axes
          type: string
        upperBound:
          description: maximum value of the axes
          type: string
      example:
        units:
          label:
            en: some text
          symbol:
            value: some text
            type: some text
        lowerBound: some text
        upperBound: some text
    axesListDefInfo:
      description: Definition for those axis which are not based on regular intervals
      required:
        - units
        - values
      type: object
      properties:
        units:
          $ref: '#/components/schemas/units'
        values:
          description: list of the valid values for the axis
          type: array
          items:
            type: string
      example:
        units:
          label:
            en: some text
          symbol:
            value: some text
            type: some text
        values:
          - some text
          - some text
    ObservedProperty:
      title: Root Type for ObservedProperty
      description: Observed property detail
      required:
        - id
        - label
      type: object
      properties:
        id:
          description: |-
            URI linking to an external registry which contains the definitive definition of
            the observed property
          type: string
        label:
          $ref: '#/components/schemas/descriptionInfo'
      example:
        id: 'http://vocab.nerc.ac.uk/standard_name/sea_ice_area_fraction/'
        label:
          en: Sea Ice Concentration
    CoverageJSON:
      title: Root Type for CoverageJSON
      description: 'JSON output format '
      required:
        - type
        - domain
        - parameters
        - ranges
      type: object
      properties:
        type:
          description: Coverage domain type
          enum:
            - Coverage
        domain:
          $ref: '#/components/schemas/Domain'
        parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Parameter'
        ranges:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/range'
    Domain:
      title: Root Type for Domain
      description: Coverage geotemporal area description
      required:
        - axes
        - domainType
        - type
      type: object
      properties:
        type:
          description: Type
          enum:
            - Domain
        domainType:
          description: Domain type
          enum:
            - Grid
            - Point
            - Trajectory
            - PointSeries
            - PolygonSeries
            - MultiPolygon
            - MultiPoint
        axes:
          $ref: '#/components/schemas/axes'
      example:
        type: Domain
        domainType: Grid
        axes:
          x:
            values:
              - -10
              - -5
              - 0
          'y':
            values:
              - 40
              - 50
          z:
            values:
              - 5
          t:
            values:
              - '2010-01-01T00:12:20Z'
    axes:
      title: Root Type for axes
      description: geotemporal axes for a CoverageJSON domain
      required:
        - t
        - x
        - 'y'
      type: object
      properties:
        x:
          $ref: '#/components/schemas/numeric_axis_values'
        'y':
          $ref: '#/components/schemas/numeric_axis_values'
        z:
          type: array
          items:
            $ref: '#/components/schemas/string_axis_values'
        t:
          $ref: '#/components/schemas/string_axis_values'
      example:
        x:
          values:
            - -10
            - -5
            - 0
        'y':
          values:
            - 40
            - 50
        z:
          values:
            - 5
        t:
          values:
            - '2010-01-01T00:12:20Z'
    numeric_axis_values:
      title: Root Type for numeric_axis_values
      description: numeric coordinates definition
      required:
        - values
      type: object
      properties:
        values:
          description: Array of numeric values
          type: array
          items:
            type: number
      example:
        - -10
        - -5
        - 0
    string_axis_values:
      title: Root Type for numeric_axis_values
      description: string coordinates definition
      required:
        - values
      type: object
      properties:
        values:
          description: Array of numeric values
          type: array
          items:
            type: string
      example:
        - '2010-01-01T00:12:20Z'
        - '2010-01-02T00:12:20Z'
    range:
      title: Root Type for range
      description: Data values for a parameter
      required:
        - type
        - dataType
        - values
        - axisNames
      type: object
      properties:
        type:
          description: Definition of the data structure
          enum:
            - NdArray
        dataType:
          description: Format of the data values in the array
          enum:
            - int
            - long
            - float
            - double
            - string
        axisNames:
          description: References to the axes the data values map to
          type: array
          items:
            type: string
        shape:
          description: Structure of the array data
          type: array
          items:
            type: number
        values:
          description: Parameter data values
          type: array
          items: {}
      example:
        type: NdArray
        dataType: float
        axisNames:
          - t
          - z
          - 'y'
          - x
        shape:
          - 1
          - 1
          - 2
          - 3
        values:
          - 0.5
          - 0.6
          - 0.4
          - 0.6
          - 0.2
          - null
    instanceAxes:
      type: object
      properties:
        x:
          $ref: '#/components/schemas/axisExtent'
        'y':
          $ref: '#/components/schemas/axisExtent'
        t:
          $ref: '#/components/schemas/axisExtent'
        z:
          $ref: '#/components/schemas/axisExtent'
        m:
          $ref: '#/components/schemas/axisExtent'
        crs:
          $ref: '#/components/schemas/crsObject'
      required:
        - x
        - 'y'
      example:
        x:
          label: Longitude
          lowerBound: -180
          upperBound: 180
          uomLabel: degrees
        'y':
          label: Latitude
          lowerBound: -90
          upperBound: 90
          uomLabel: degrees
        z:
          label: Height
          lowerBound: 10
          upperBound: 100
          uomLabel: m
          attributes:
            wkt: ...
            proj4: ...
    axisExtent:
      type: object
      properties:
        label:
          type: string
        lowerBound:
          type: string
        upperBound:
          type: string
        uomLabel:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
      required:
        - label
        - lowerBound
        - upperBound
        - uomLabel
    EDRfeatureCollectionGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: "#/components/schemas/featureGeoJSON"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        timeStamp:
          $ref: "#/components/schemas/timeStamp"
        numberMatched:
          $ref: "#/components/schemas/numberMatched"
        numberReturned:
          $ref: "#/components/schemas/numberReturned"
    featureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: "#/components/schemas/geometryGeoJSON"
        properties:
          $ref: "#/components/schemas/EDRProperties"
        id:
          oneOf:
            - type: string
            - type: integer
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    geometryGeoJSON:
      oneOf:
      - $ref: "#/components/schemas/pointGeoJSON"
      - $ref: "#/components/schemas/multipointGeoJSON"
      - $ref: "#/components/schemas/linestringGeoJSON"
      - $ref: "#/components/schemas/multilinestringGeoJSON"
      - $ref: "#/components/schemas/polygonGeoJSON"
      - $ref: "#/components/schemas/multipolygonGeoJSON"
      - $ref: "#/components/schemas/geometrycollectionGeoJSON"
    geometrycollectionGeoJSON:
      type: object
      required:
        - type
        - geometries
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          type: array
          items:
            $ref: "#/components/schemas/geometryGeoJSON"
    landingPage:
      type: object
      required:
        - links
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    linestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
    multilinestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: array
              minItems: 2
              items:
                type: number
    multipointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
    multipolygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                type: array
                minItems: 2
                items:
                  type: number
    numberMatched:
      description: |-
        The number of features of the feature type that match the selection
        parameters like `bbox`.
      type: integer
      minimum: 0
      example: 127
    numberReturned:
      description: |-
        The number of features in the feature collection.

        A server may omit this information in a response, if the information
        about the number of features is not known or difficult to compute.

        If the value is provided, the value shall be identical to the number
        of items in the "features" array.
      type: integer
      minimum: 0
      example: 10
    pointGeoJSON:
      type: object
      required:
        - type
        - coordinates
        - properties
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
        properties: 
          $ref: "#/components/schemas/EDRProperties"
    polygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
    timeStamp:
      description: This property indicates the time and date when the response was generated.
      type: string
      format: date-time
      example: '2017-08-17T08:05:32Z'
    EDRProperties:
      type: object
      title: EDR GeoJSON Properties 
      description: Properties to describe existing EDR features -- may be real-world or virtual sampling features.
      default: {}
      example:
      - datetime: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
        label: Monitoring site name
        parametername:
          - velocity
          - temperature
        uri: https://feature_identifier
      required:
        - datetime
        - parametername
        - label
        - uri
      properties:
        datetime:
            type: string
            title: Date/time Domain
            description: Either a date-time or a period string that adheres to RFC 3339. Indicates the time instant or period for whidh data are available from the EDR feature.
            default: ''
            example:
              - 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
        parametername:
            type: array
            title: Available Parameters
            description: Unique IDs of available parameters, this is the value used for querying the data and corresponds to an ID in the parameter metadata of the collection.
            default: []
            items:
                type: string
                title: Parameter ID list
                description: Each entry should contain one parameter ID that can be used to query against the feature.
                default: ''
                example:
                  - velocity
                  - temperature
        label:
            type: string
            title: Label
            description: A label such as a site name or other text to use on a link.
            default: ''
            example:
              - Site A
        uri:
            type: string
            title: A URI identifying the feature. 
            description: An identifier uri for the feature. May be a uri for a real-world sampling feature of a uri to retrieve the particular feature of the EDR service instance.
            default: ''
            example:
              - https://feature_identifier
    crsObject:
      type: object
      properties:
        name:
          type: string
          example: CRS84
        wkt:
          type: string
          example: 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]'        
  parameters:
    bbox:
      name: bbox
      in: query
      description: |
        Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):
        * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)
        The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.
        For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
      required: false
      style: form
      explode: false
      schema:
        maxItems: 6
        minItems: 4
        type: array
        items:
          type: number
    time:
      name: time
      in: query
      description: |-
        Either a date-time or a period string that adheres to RFC 3339. Examples:
        * A date-time: "2018-02-12T23:20:50Z" * A period: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z" or "2018-02-12T00:00:00Z/P1M6DT12H31M12S" or a list of
        date-times "2018-02-12T00:00:00Z,2018-06-12T03:00:00Z,2020-02-15T21:00:00Z"
        Only features that have a temporal property that intersects the value of `time` are selected.
        If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
      required: false
      style: form
      explode: false
      schema:
        type: string
    collectionId:
      name: collectionId
      in: path
      description: Identifier (id) of a specific collection
      required: true
      schema:
        type: string
    crs:
      name: crs
      in: query
      description: identifier (id) of the coordinate system to return data in list of valid crs identifiers for the chosen collection are defined in the metadata responses.  If not supplied the coordinate reference system will default to WGS84.
      required: false
      example: native
      schema:
        type: string
    groupId:
      name: groupId
      in: path
      description: Identifier (name) of a specific group
      required: true
      schema:
        type: string
    instanceId:
      name: instanceId
      in: path
      description: Identifier (id) of a specific instance of a collection
      required: true
      schema:
        type: string
    outputFormat:
      name: outputformat
      in: query
      description: Format to return query results in
      required: false
      schema:
        type: string
    parametername:
      name: parametername
      in: query
      description: |-
        comma delimited list of parameters to retrieve data for.  Valid parameters are
        listed in the collections metadata
      required: true
      explode: false
      schema:
        minItems: 1
        type: array
        items:
          type: string
    resolution:
      name: resolution
      in: query
      description: |
        Defined if the user requires data at a different resolution from the native resolution of the data along the requested path
        
        If this is a single value it denotes the number of intervals to retrieve data for along the path
          
          i.e. resolution=10 
          
          would retrieve 10 values along the path from the first coordinate value to the last coordinate value (i.e. a value at both the first and last coordinates and 8 values between).

      schema:
        type: string
    corridorWidth:
      name: corridorwidth
      in: query
      description: |
        width of the corridor and the units of the width value
        
        The width value represents the whole width of the corridor where
        the position supplied in the `coords` query parameter is the centre
        point of the corridor

        `corridorwidth={width}/{units}`

        e.g.  corridorwidth=100/m

        Would be a request for a corridor 100m wide with the coords parameter values being the centre point of the requested corridor, the request would be for data values 50m either side of the coordinates defined in the coords parameter. 
        
        The width units supported by the collection will be provided in
        the API metadata responses 
      schema:
        type: string
    corridorHeight:
      name: corridorheight
      in: query
      description: |
        height of the corridor and the units of the height value
        
        The height value represents the whole height of the corridor where
        the position supplied in the `coords` query parameter is the centre
        point of the corridor

        `corridorheight={height}/{units}`

        e.g.  corridorheight=100/m

        Would be a request for a corridor 100m high with the coords parameter values being the centre point of the requested corridor, the request would be for data values 50m either side of the coordinates defined in the coords parameter. 
        
        The height units supported by the collection will be provided in
        the API metadata responses
      schema:
        type: string        
    minZ:
      name: minz
      in: query
      required: true
      description: |
        Define the location of the bottom of the cube 
        i.e. minz=level

        for instance if bottom of cube is at the 950hPa pressure level

        minZ=850

        The units will default to those of the coordinate reference system.  
        If no CRS is defined the values will be assumed to be 
        height above sea level in metres. 
      schema:
        type: string
    maxZ:
      name: maxz
      in: query
      required: true
      description: |
        Define the location of the top of the cube 
        i.e. maxz=level

        for instance if top of cube is at the 650hPa pressure level

        maxz=650

        The units will default to those of the coordinate reference system.  
        If no CRS is defined the values will be assumed to be 
        height above sea level in metres. 
      schema:
        type: string
    resolutionX:
      name: resolutionx
      in: query
      description: |+
        Defined it the user requires data at a different resolution from the native resolution of the data along the x-axis
        
        If this is a single value it denotes the number of intervals to retrieve data for along the x-axis
          
          i.e. resolutionx=10 
          
          would retrieve 10 values along the x-axis from the minimum x coordinate to maximum x coordinate (i.e. a value at both the minimum x and maximum x coordinates and 8 values between).

      schema:
        type: string
    resolutionY:
      name: resolutiony
      in: query
      description: |
        Defined it the user requires data at a different resolution from the native resolution of the data along the y-axis
        
        If this is a single value it denotes the number of intervals to retrieve data for along the y-axis
          
          i.e. resolutiony=10 
          
          would retrieve 10 values along the y-axis from the minimum y coordinate to maximum y coordinate (i.e. a value at both the minimum y and maximum y coordinates and 8 values between).

      schema:
        type: string
    resolutionZ:
      name: resolutionz
      in: query
      description: |+
        Defined it the user requires data at a different resolution from the native resolution of the data along the z-axis
        
        If this is a single value it denotes the number of intervals to retrieve data for along the z-axis
          
          i.e. resolutionz=10 
          
          would retrieve 10 values along the z-axis from the minimum z coordinate to maximum z  coordinate (i.e. a value at both the minimum z and maximum z coordinates and 8 values between).

      schema:
        type: string
    pointCoords:
      name: coords
      in: query
      description: |
        location(s) to return data for, the coordinates are defined by a Well Known Text
        (wkt) string. to retrieve a single location :

        POINT(x y) i.e. POINT(0 51.48) for Greenwich, London

        And for a list of locations

        MULTIPOINT((x y),(x1 y1),(x2 y2),(x3 y3))

        i.e.
        MULTIPOINT((38.9 -77),(48.85 2.35),(39.92 116.38),(-35.29 149.1),(51.5 -0.1))


        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        the coordinate values will depend on the CRS parameter, if this is not defined
        the values will be assumed to WGS85 values (i.e x=longitude and y=latitude)
      required: true
      schema:
        type: string
    radiusCoords:
      name: coords
      in: query
      description: |
        location(s) to return data for, the coordinates are defined by a Well Known Text
        (wkt) string. to retrieve a single location :

        POINT(x y) i.e. POINT(0 51.48) for Greenwich, London

        And for a list of locations

        MULTIPOINT((x y),(x1 y1),(x2 y2),(x3 y3))

        i.e.
        MULTIPOINT((38.9 -77),(48.85 2.35),(39.92 116.38),(-35.29 149.1),(51.5 -0.1))


        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        the coordinate values will depend on the CRS parameter, if this is not defined
        the values will be assumed to WGS85 values (i.e x=longitude and y=latitude)
      required: true
      schema:
        type: string
    within:
      name: within
      in: query
      description: Defines radius of area around defined coordinates to include in the data selection
      required: true
      example: 10
      schema:
        type: number
    withinUnits:
      name: withinunits
      in: query
      description: Distance units for the within parameter
      required: true
      example: KM
      schema:
        type: string
    areaCoords:
      name: coords
      in: query
      description: |-
        Only data that has a geometry that intersects the area defined by the polygon
        are selected. 

        The polygon is defined using a Well Known Text string following 

        coords=POLYGON((x y,x1 y1,x2 y2,...,xn yn x y))

        which are values in the coordinate system defined by the crs query parameter 
        (if crs is not defined the values will be assumed to be WGS84 longitude/latitude coordinates).  

        For instance a polygon that roughly describes an area that contains 
        South West England in WGS84 would look like: 

        coords=POLYGON((-6.1 50.3,-4.35 51.4,-2.6 51.6,-2.8 50.6,-5.3 49.9,-6.1,50.3))

        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        The coords parameter will only support 2D POLYGON definitions
      required: true
      schema:
        type: string
    z:
      name: z
      in: query
      description: |
        Define the vertical level to return data from 
        i.e. z=level

        for instance if the 850hPa pressure level is being queried

        z=850
        
        or a range to return data for all levels between and including 2 defined levels
        i.e. z=minimum value/maximum value
        
        for instance if all values between and including 10m and 100m
        
        z=10/100

        finally a list of height values can be specified
        i.e. z=value1,value2,value3
        
        for instance if values at 2m, 10m and 80m are required
        
        z=2,10,80
        
        When not specified data from all available heights SHOULD be returned
      schema:
        type: string
    cubeCoords:
      name: coords
      in: query
      description: |-
        Only data that has a geometry that intersects the area defined by the cube
        are selected. 

        The cubes x y coordinates are defined using **Rectangular Polygon** as Well Known Text

        coords=POLYGON((x y,x1 y1,x2 y2, x3 y3, x y))

        which are values in the coordinate system defined by the crs query parameter 
        if crs is not defined the values will be assumed to be 
        WGS84 longitude/latitude coordinates and heights will be assumed 
        to be in metres above mean sea level  

        For instance a cube that roughly describes an area that contains 
        South West England in WGS84 would look like

        coords=POLYGON((-6.0 50.0,-4.35 50.0,-4.35 52.0,,-6.0 52.0,-6.0 50.0))

        `If the WKT does not define a Rectangle the service will generate 
        an 400 error message`

        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry
      required: true
      schema:
        type: string
    trajectoryCoords:
      name: coords
      in: query
      description: |-
        Only data that has a geometry that intersects the area defined by the linestring
        are selected. 

        The trajectory is defined using a Well Known Text string following 

        A 2D trajectory, on the surface of earth with no time or height dimensions: 
         coords=LINESTRING(51.14 -2.98, 51.36 -2.87, 51.03 -3.15, 50.74 -3.48, 50.9 -3.36)

        A 2D trajectory, on the surface of earth with all for the same time and no height dimension, time value defined in ISO8601 format by the `time` query parameter : 
         coords=LINESTRING(51.14 -2.98, 51.36 -2.87, 51.03 -3.15, 50.74 -3.48, 50.9 -3.36)&time=2018-02-12T23:00:00Z 
         
        A 2D trajectory, on the surface of earth with no time value but at a fixed height level, height defined in the collection height units by the `z` query parameter : 
         coords=LINESTRING(51.14 -2.98, 51.36 -2.87, 51.03 -3.15, 50.74 -3.48, 50.9 -3.36)&z=850 

        A 2D trajectory, on the surface of earth with all for the same time and at a fixed height level, time value defined in ISO8601 format by the `time` query parameter and height defined in the collection height units by the `z` query parameter : 
         coords=LINESTRING(51.14 -2.98, 51.36 -2.87, 51.03 -3.15, 50.74 -3.48, 50.9 -3.36)&time=2018-02-12T23:00:00Z&z=850 

        A 3D trajectory, on the surface of the earth but over a time range with no height values:
        coords=LINESTRINGM(51.14 -2.98 1560507000, 51.36 -2.87 1560507600, 51.03 -3.15 1560508200, 50.74 -3.48 1560508500, 50.9 -3.36 1560510240)

        A 3D trajectory, on the surface of the earth but over a time range with a fixed height value, height defined in the collection height units by the `z` query parameter : 
        coords=LINESTRINGM(51.14 -2.98 1560507000, 51.36 -2.87 1560507600, 51.03 -3.15 1560508200, 50.74 -3.48 1560508500, 50.9 -3.36 1560510240)&z=200


        A 3D trajectory, through a 3D volume with height or depth, but no defined time:
        coords=LINESTRINGZ(51.14 -2.98 0.1, 51.36 -2.87 0.2, 51.03 -3.15 0.3, 50.74 -3.48 0.4, 50.9 -3.36 0.5)

        A 3D trajectory, through a 3D volume with height or depth, but a fixed time time value defined in ISO8601 format by the `time` query parameter:
        coords=LINESTRINGZ(51.14 -2.98 0.1, 51.36 -2.87 0.2, 51.03 -3.15 0.3, 50.74 -3.48 0.4, 50.9 -3.36 0.5)&time=2018-02-12T23:00:00Z

        A 4D trajectory, through a 3D volume but over a time range:
        coords=LINESTRINGZM(51.14 -2.98 0.1 1560507000,51.36 -2.87 0.2 1560507600, 51.03 -3.15 0.3 1560508200, 50.74 -3.48 0.4 1560508500, 50.9 -3.36 0.5 1560510240)
        (using either the `time` or `z` parameters with a 4D trajectory wil generate an error response)

        where `Z` is the height value.  
        `If the specified CRS does not define the height units the heights will units will default to metres above mean sea level`
        
        and `M` the number of seconds that have elapsed since the Unix epoch, that is the time 00:00:00 UTC on 1 January 1970. See
        https://en.wikipedia.org/wiki/Unix_time

      required: true
      schema:
        type: string
    corridorCoords:
      name: coords
      in: query
      description: |-
        Only data that has a geometry that intersects the area defined by the linestring
        are selected. 

        The centre of the corridor is defined using a Well Known Text string following 

        A 2D corridor, on the surface of earth, at the same time: 
         coords=LINESTRING(51.14 -2.98, 51.36 -2.87, 51.03 -3.15, 50.74 -3.48, 50.9 -3.36)

        A 3D corridor centre, on the surface of the earth but over a time range:
        coords=LINESTRINGM(51.14 -2.98 1560507000, 51.36 -2.87 1560507600, 51.03 -3.15 1560508200, 50.74 -3.48 1560508500, 50.9 -3.36 1560510240)

        A 3D corridor centre, through a 3D volume with height or depth, for the same time:
        coords=LINESTRINGZ(51.14 -2.98 0.1, 51.36 -2.87 0.2, 51.03 -3.15 0.3, 50.74 -3.48 0.4, 50.9 -3.36 0.5)

        A 4D corridor, through a 3D corridor centre but over a time range:
        coords=LINESTRINGZM(51.14 -2.98 0.1 1560507000,51.36 -2.87 0.2 1560507600, 51.03 -3.15 0.3 1560508200, 50.74 -3.48 0.4 1560508500, 50.9 -3.36 0.5 1560510240)

        where `Z` is the height value.  
        `If the specified CRS does not define the height units the heights will units will default to metres above mean sea level`
        
        and `M` the number of seconds that have elapsed since the Unix epoch, that is the time 00:00:00 UTC on 1 January 1970. See
        https://en.wikipedia.org/wiki/Unix_time
        
      required: true
      schema:
        type: string
    locID:
      name: locID
      in: path
      required: true
      description: 'Retreive data for the location defined by locID (i.e. London_Heathrow, EGLL, 03772 etc)'
      schema:
        type: string
    crsName:
      name: outputcrs
      in: query
      schema:
        type: string
        example: CRS84          


servers:
  - description: Example endpoint, not implemented
    url: https://ogcapi.ogc.org/
